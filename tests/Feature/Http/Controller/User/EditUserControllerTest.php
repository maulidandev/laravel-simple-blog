<?php

namespace Tests\Feature\Http\Controller\User;

use App\Models\Role;
use App\Models\User;
use Database\Seeders\UserSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class EditUserControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed(UserSeeder::class);
    }

    public function testAccessEditPage()
    {
        $user = User::factory()->create();
        $response = $this->get(route("users.edit", $user->id));

        $response->assertStatus(200);
    }

    /**
     * @param $inputFields
     * @dataProvider ValidDataProvider
     */
    public function testUpdateWithValidData($inputFields){
        $user = User::factory()->create();
        $data = $this->getValidData($inputFields);

        $response = $this->from(route("users.create"))
            ->put(route("users.update", $user->id), $data);

        $response->assertStatus(302);
        $this->assertDatabaseHas("users", [
            "email" => $data["email"]
        ]);
        $response->assertRedirect(route("users.index"));
    }

    public function ValidDataProvider(){
        return [
            [[]],
            [["password" => ""]]
        ];
    }

    /**
     * @dataProvider validationDataProvider
     */
    public function testInvalidData($errorFields, $inputFields){
        $user = User::factory()->create();

        if (!is_array($inputFields))
            $inputFields = $inputFields();

        $data = $this->getValidData($inputFields);

        $response = $this->from(route("users.create"))
            ->put(route("users.update", $user->id), $data);

        $response->assertStatus(302);
        $response->assertSessionHasErrors([$errorFields]);
        $response->assertRedirect(route("users.create"));
    }

    public function validationDataProvider(){
        return [
            ["name", ["name" => ""]],
            ["name", ["name" => str_repeat('John Thor ', 26)]],

            ["email", ["email" => ""]],
            ["email", ["email" => "johnthor"]],
            ["email", ["email_confirmation" => ""]],
            ["email", ["email_confirmation" => "johnthor"]],
            ["email", ["email_confirmation" => "johnthor@email.com"]],
            ["email", ["email_confirmation" => str_repeat("johnthor@email.com", 30)]],

            ["password", ["password" => "123"]],
            ["password", ["password_confirmation" => ""]],
            ["password", ["password_confirmation" => "123"]],

            ["role", function(){
                return ["role" => Role::orderBy("id", "desc")->first()->id+1];
            }]
        ];
    }

    private function getValidData($overrides = []){
        $user = User::factory()->make();

        return array_merge([
            "name" => $user->name,
            "email" => $user->email,
            "email_confirmation" => $user->email,
            "password" => "password",
            "password_confirmation" => "password",
            "role" => $user->role_id
        ], $overrides);
    }
}
